	04012023.vim	/^nnoremap  :Files$/;"	m
	04012023.vim	/^nnoremap  :vertical resize +2$/;"	m
		04012023.vim	/^inoremap <silent> 	 =UltiSnips#ExpandSnippet()$/;"	m
	04012023.vim	/^nnoremap   :NERDTreeToggle$/;"	m
	04012023.vim	/^nnoremap  :resize +2$/;"	m
	04012023.vim	/^nnoremap <buffer> <silent>  :call nerdtree#ui_glue#invokeKeyMap("<C-k>")$/;"	m
	04012023.vim	/^nnoremap  :vertical resize -2$/;"	m
	04012023.vim	/^inoremap <expr> $/;"	m
	04012023.vim	/^nnoremap <buffer> <silent> $/;"	m
	04012023.vim	/^nnoremap  :bd$/;"	m
	04012023.vim	/^nnoremap  :w$/;"	m
	04012023.vim	/^nnoremap  :wqa$/;"	m
	04012023.vim	/^inoremap  <Nop>$/;"	m
	04012023.vim	/^nnoremap <silent>  :EasyCompleteGotoDefinition$/;"	m
<nope>	04012023.vim	/^inoremap <silent> <expr> <nope> easycomplete#CleverTab()$/;"	m
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
,c	04012023.vim	/^nnoremap ,c :normal Hxxj$/;"	m
0	04012023.vim	/^normal! 0$/;"	m
017|	04012023.vim	/^normal! 017|$/;"	m
02|	04012023.vim	/^normal! 02|$/;"	m
045|	04012023.vim	/^normal! 045|$/;"	m
04|	04012023.vim	/^normal! 04|$/;"	m
09|	04012023.vim	/^normal! 09|$/;"	m
<2-LeftMouse>	04012023.vim	/^nnoremap <buffer> <silent> <2-LeftMouse> :call nerdtree#ui_glue#invokeKeyMap("<2-LeftMouse>")$/;"	m
<C-F>	04012023.vim	/^nnoremap <C-F> :Files$/;"	m
<C-H>	04012023.vim	/^nnoremap <C-H> :vertical resize +2$/;"	m
<C-J>	04012023.vim	/^nnoremap <C-J> :resize -2$/;"	m
<C-J>	04012023.vim	/^nnoremap <buffer> <silent> <C-J> :call nerdtree#ui_glue#invokeKeyMap("<C-j>")$/;"	m
<C-K>	04012023.vim	/^nnoremap <C-K> :resize +2$/;"	m
<C-K>	04012023.vim	/^nnoremap <buffer> <silent> <C-K> :call nerdtree#ui_glue#invokeKeyMap("<C-k>")$/;"	m
<C-L>	04012023.vim	/^nnoremap <C-L> :vertical resize -2$/;"	m
<C-Q>	04012023.vim	/^nnoremap <C-Q> :bd$/;"	m
<C-S>	04012023.vim	/^nnoremap <C-S> :w$/;"	m
<C-Tab>	04012023.vim	/^inoremap <silent> <C-Tab> =UltiSnips#ListSnippets()$/;"	m
<C-Z>	04012023.vim	/^nnoremap <C-Z> :wqa$/;"	m
<C-]>	04012023.vim	/^nnoremap <silent> <C-]> :EasyCompleteGotoDefinition$/;"	m
<D-c>	04012023.vim	/^vmap <D-c> "*y$/;"	m
<D-v>	04012023.vim	/^map! <D-v> *$/;"	m
<D-v>	04012023.vim	/^nmap <D-v> "*P$/;"	m
<D-v>	04012023.vim	/^vmap <D-v> "-d"*P$/;"	m
<D-x>	04012023.vim	/^vmap <D-x> "*d$/;"	m
<Down>	04012023.vim	/^inoremap <expr> <Down> easycomplete#Down()$/;"	m
<Down>	04012023.vim	/^noremap <Down> <Nop>$/;"	m
<F1>	04012023.vim	/^map <F1> :Stdheader$/;"	m
<F7>	04012023.vim	/^nnoremap <silent> <F7> :FloatermNew$/;"	m
<F8>	04012023.vim	/^nnoremap <silent> <F8> :FloatermPrev$/;"	m
<F9>	04012023.vim	/^nnoremap <silent> <F9> :FloatermNext$/;"	m
<Left>	04012023.vim	/^noremap <Left> <Nop>$/;"	m
<LeftRelease>	04012023.vim	/^nnoremap <buffer> <silent> <LeftRelease> <LeftRelease>:call nerdtree#ui_glue#invokeKeyMap("<LeftRelease>")$/;"	m
<MiddleMouse>	04012023.vim	/^nnoremap <buffer> <silent> <MiddleMouse> :call nerdtree#ui_glue#invokeKeyMap("<MiddleMouse>")$/;"	m
<NL>	04012023.vim	/^nnoremap <NL> :resize -2$/;"	m
<NL>	04012023.vim	/^nnoremap <buffer> <silent> <NL> :call nerdtree#ui_glue#invokeKeyMap("<C-j>")$/;"	m
<Plug>(ale_code_action)	04012023.vim	/^nnoremap <silent> <Plug>(ale_code_action) :ALECodeAction$/;"	m
<Plug>(ale_complete)	04012023.vim	/^inoremap <silent> <Plug>(ale_complete) :ALEComplete$/;"	m
<Plug>(ale_detail)	04012023.vim	/^nnoremap <silent> <Plug>(ale_detail) :ALEDetail$/;"	m
<Plug>(ale_disable)	04012023.vim	/^nnoremap <silent> <Plug>(ale_disable) :ALEDisable$/;"	m
<Plug>(ale_disable_buffer)	04012023.vim	/^nnoremap <silent> <Plug>(ale_disable_buffer) :ALEDisableBuffer$/;"	m
<Plug>(ale_documentation)	04012023.vim	/^nnoremap <silent> <Plug>(ale_documentation) :ALEDocumentation$/;"	m
<Plug>(ale_enable)	04012023.vim	/^nnoremap <silent> <Plug>(ale_enable) :ALEEnable$/;"	m
<Plug>(ale_enable_buffer)	04012023.vim	/^nnoremap <silent> <Plug>(ale_enable_buffer) :ALEEnableBuffer$/;"	m
<Plug>(ale_filerename)	04012023.vim	/^nnoremap <silent> <Plug>(ale_filerename) :ALEFileRename$/;"	m
<Plug>(ale_find_references)	04012023.vim	/^nnoremap <silent> <Plug>(ale_find_references) :ALEFindReferences$/;"	m
<Plug>(ale_first)	04012023.vim	/^nnoremap <silent> <Plug>(ale_first) :ALEFirst$/;"	m
<Plug>(ale_fix)	04012023.vim	/^nnoremap <silent> <Plug>(ale_fix) :ALEFix$/;"	m
<Plug>(ale_go_to_definition)	04012023.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition) :ALEGoToDefinition$/;"	m
<Plug>(ale_go_to_definition_in_split)	04012023.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition_in_split) :ALEGoToDefinition -split$/;"	m
<Plug>(ale_go_to_definition_in_tab)	04012023.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition_in_tab) :ALEGoToDefinition -tab$/;"	m
<Plug>(ale_go_to_definition_in_vsplit)	04012023.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition_in_vsplit) :ALEGoToDefinition -vsplit$/;"	m
<Plug>(ale_go_to_implementation)	04012023.vim	/^nnoremap <silent> <Plug>(ale_go_to_implementation) :ALEGoToImplementation$/;"	m
<Plug>(ale_go_to_implementation_in_split)	04012023.vim	/^nnoremap <silent> <Plug>(ale_go_to_implementation_in_split) :ALEGoToImplementation -split$/;"	m
<Plug>(ale_go_to_implementation_in_tab)	04012023.vim	/^nnoremap <silent> <Plug>(ale_go_to_implementation_in_tab) :ALEGoToImplementation -tab$/;"	m
<Plug>(ale_go_to_implementation_in_vsplit)	04012023.vim	/^nnoremap <silent> <Plug>(ale_go_to_implementation_in_vsplit) :ALEGoToImplementation -vsplit$/;"	m
<Plug>(ale_go_to_type_definition)	04012023.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition) :ALEGoToTypeDefinition$/;"	m
<Plug>(ale_go_to_type_definition_in_split)	04012023.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition_in_split) :ALEGoToTypeDefinition -split$/;"	m
<Plug>(ale_go_to_type_definition_in_tab)	04012023.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition_in_tab) :ALEGoToTypeDefinition -tab$/;"	m
<Plug>(ale_go_to_type_definition_in_vsplit)	04012023.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition_in_vsplit) :ALEGoToTypeDefinition -vsplit$/;"	m
<Plug>(ale_hover)	04012023.vim	/^nnoremap <silent> <Plug>(ale_hover) :ALEHover$/;"	m
<Plug>(ale_import)	04012023.vim	/^nnoremap <silent> <Plug>(ale_import) :ALEImport$/;"	m
<Plug>(ale_last)	04012023.vim	/^nnoremap <silent> <Plug>(ale_last) :ALELast$/;"	m
<Plug>(ale_lint)	04012023.vim	/^nnoremap <silent> <Plug>(ale_lint) :ALELint$/;"	m
<Plug>(ale_next)	04012023.vim	/^nnoremap <silent> <Plug>(ale_next) :ALENext$/;"	m
<Plug>(ale_next_error)	04012023.vim	/^nnoremap <silent> <Plug>(ale_next_error) :ALENext -error$/;"	m
<Plug>(ale_next_warning)	04012023.vim	/^nnoremap <silent> <Plug>(ale_next_warning) :ALENext -warning$/;"	m
<Plug>(ale_next_wrap)	04012023.vim	/^nnoremap <silent> <Plug>(ale_next_wrap) :ALENextWrap$/;"	m
<Plug>(ale_next_wrap_error)	04012023.vim	/^nnoremap <silent> <Plug>(ale_next_wrap_error) :ALENext -wrap -error$/;"	m
<Plug>(ale_next_wrap_warning)	04012023.vim	/^nnoremap <silent> <Plug>(ale_next_wrap_warning) :ALENext -wrap -warning$/;"	m
<Plug>(ale_previous)	04012023.vim	/^nnoremap <silent> <Plug>(ale_previous) :ALEPrevious$/;"	m
<Plug>(ale_previous_error)	04012023.vim	/^nnoremap <silent> <Plug>(ale_previous_error) :ALEPrevious -error$/;"	m
<Plug>(ale_previous_warning)	04012023.vim	/^nnoremap <silent> <Plug>(ale_previous_warning) :ALEPrevious -warning$/;"	m
<Plug>(ale_previous_wrap)	04012023.vim	/^nnoremap <silent> <Plug>(ale_previous_wrap) :ALEPreviousWrap$/;"	m
<Plug>(ale_previous_wrap_error)	04012023.vim	/^nnoremap <silent> <Plug>(ale_previous_wrap_error) :ALEPrevious -wrap -error$/;"	m
<Plug>(ale_previous_wrap_warning)	04012023.vim	/^nnoremap <silent> <Plug>(ale_previous_wrap_warning) :ALEPrevious -wrap -warning$/;"	m
<Plug>(ale_rename)	04012023.vim	/^nnoremap <silent> <Plug>(ale_rename) :ALERename$/;"	m
<Plug>(ale_repeat_selection)	04012023.vim	/^nnoremap <silent> <Plug>(ale_repeat_selection) :ALERepeatSelection$/;"	m
<Plug>(ale_reset)	04012023.vim	/^nnoremap <silent> <Plug>(ale_reset) :ALEReset$/;"	m
<Plug>(ale_reset_buffer)	04012023.vim	/^nnoremap <silent> <Plug>(ale_reset_buffer) :ALEResetBuffer$/;"	m
<Plug>(ale_toggle)	04012023.vim	/^nnoremap <silent> <Plug>(ale_toggle) :ALEToggle$/;"	m
<Plug>(ale_toggle_buffer)	04012023.vim	/^nnoremap <silent> <Plug>(ale_toggle_buffer) :ALEToggleBuffer$/;"	m
<Plug>(denops-grep)	04012023.vim	/^nnoremap <Plug>(denops-grep) <Cmd>call denops#notify("example-standard", "anonymous:pQ8EsIMXQrnZnxeIOKRe32BBUERPvZ9J", [])$/;"	m
<Plug>(fzf-complete-buffer-line)	04012023.vim	/^inoremap <expr> <Plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()$/;"	m
<Plug>(fzf-complete-file)	04012023.vim	/^inoremap <expr> <Plug>(fzf-complete-file) fzf#vim#complete#path("find . -path '*\/\\.*' -prune -o -type f -print -o -type l -print | sed 's:^..::'")$/;"	m
<Plug>(fzf-complete-file-ag)	04012023.vim	/^inoremap <expr> <Plug>(fzf-complete-file-ag) fzf#vim#complete#path('ag -l -g ""')$/;"	m
<Plug>(fzf-complete-line)	04012023.vim	/^inoremap <expr> <Plug>(fzf-complete-line) fzf#vim#complete#line()$/;"	m
<Plug>(fzf-complete-path)	04012023.vim	/^inoremap <expr> <Plug>(fzf-complete-path) fzf#vim#complete#path("find . -path '*\/\\.*' -prune -o -print | sed '1d;s:^..::'")$/;"	m
<Plug>(fzf-complete-word)	04012023.vim	/^inoremap <expr> <Plug>(fzf-complete-word) fzf#vim#complete#word()$/;"	m
<Plug>(fzf-insert)	04012023.vim	/^nnoremap <silent> <Plug>(fzf-insert) i$/;"	m
<Plug>(fzf-maps-i)	04012023.vim	/^inoremap <silent> <Plug>(fzf-maps-i) :call fzf#vim#maps('i', 0)$/;"	m
<Plug>(fzf-maps-n)	04012023.vim	/^nnoremap <silent> <Plug>(fzf-maps-n) :call fzf#vim#maps('n', 0)$/;"	m
<Plug>(fzf-maps-o)	04012023.vim	/^onoremap <silent> <Plug>(fzf-maps-o) :call fzf#vim#maps('o', 0)$/;"	m
<Plug>(fzf-normal)	04012023.vim	/^nnoremap <silent> <Plug>(fzf-normal) <Nop>$/;"	m
<Plug>EasycompleteExpandSnippet	04012023.vim	/^inoremap <silent> <Plug>EasycompleteExpandSnippet =UltiSnips#ExpandSnippet()$/;"	m
<Plug>EasycompleteNill	04012023.vim	/^inoremap <silent> <Plug>EasycompleteNill =easycomplete#nill()$/;"	m
<Plug>EasycompleteRefresh	04012023.vim	/^inoremap <silent> <Plug>EasycompleteRefresh =easycomplete#refresh()$/;"	m
<Plug>EasycompleteShiftTabTrigger	04012023.vim	/^inoremap <silent> <Plug>EasycompleteShiftTabTrigger =seasycomplete#CleverShiftTab()$/;"	m
<Plug>EasycompleteTabTrigger	04012023.vim	/^inoremap <silent> <Plug>EasycompleteTabTrigger =seasycomplete#CleverTab()$/;"	m
<Plug>NetrwBrowseX	04012023.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))$/;"	m
<Right>	04012023.vim	/^noremap <Right> <Nop>$/;"	m
<S-Tab>	04012023.vim	/^inoremap <silent> <expr> <S-Tab> easycomplete#CleverShiftTab()$/;"	m
<Up>	04012023.vim	/^inoremap <expr> <Up> easycomplete#Up()$/;"	m
<Up>	04012023.vim	/^noremap <Up> <Nop>$/;"	m
?	04012023.vim	/^nnoremap <buffer> <silent> ? :call nerdtree#ui_glue#invokeKeyMap("?")$/;"	m
A	04012023.vim	/^nnoremap <buffer> <silent> A :call nerdtree#ui_glue#invokeKeyMap("A")$/;"	m
ATLAS_NB_CHAR	mlx/mlx_string_put.c	6;"	d	file:
B	04012023.vim	/^nnoremap <buffer> <silent> B :call nerdtree#ui_glue#invokeKeyMap("B")$/;"	m
BLACK	Makefile	/^BLACK		=   \\034[0;30m$/;"	m
BLACK	libft/Makefile	/^BLACK			=	\\033[0;30m$/;"	m
BLUE	Makefile	/^BLUE		=	\\033[0;34m$/;"	m
BLUE	libft/Makefile	/^BLUE			=	\\033[0;34m$/;"	m
BLUE	mlx/Makefile	/^BLUE=$'\\x1b[34m$/;"	m
BOLD	mlx/Makefile	/^BOLD=$'\\x1b[1m$/;"	m
BUFFER_SIZE	libft/includes/get_next_line_bonus.h	16;"	d
C	04012023.vim	/^nnoremap <buffer> <silent> C :call nerdtree#ui_glue#invokeKeyMap("C")$/;"	m
CC	Makefile	/^CC				= gcc$/;"	m
CC	libft/Makefile	/^CC 				= gcc$/;"	m
CD	04012023.vim	/^nnoremap <buffer> <silent> CD :call nerdtree#ui_glue#invokeKeyMap("CD")$/;"	m
CFLAGS	Makefile	/^CFLAGS			= -Wall -Wextra -Werror -g -MMD$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS 			= -Wall -Wextra -Werror -O3 -Ofast -flto=thin -march=native -ffast-math$/;"	m
CFLAGS	mlx/Makefile	/^CFLAGS=-O3 -w$/;"	m
CYAN	Makefile	/^CYAN		=	\\033[0;36m$/;"	m
CYAN	libft/Makefile	/^CYAN			=	\\033[0;36m$/;"	m
CYAN	mlx/Makefile	/^CYAN=$'\\x1b[36m$/;"	m
C_OBJ	mlx/Makefile	/^C_OBJ=$(C_SRC:.c=.o)$/;"	m
C_SRC	mlx/Makefile	/^C_SRC= mlx_xpm.c mlx_png.c mlx_string_put.c$/;"	m
D	04012023.vim	/^nnoremap <buffer> <silent> D :call nerdtree#ui_glue#invokeKeyMap("D")$/;"	m
DARK_GRAY	Makefile	/^DARK_GRAY	=	\\033[1;30m$/;"	m
DARK_GRAY	libft/Makefile	/^DARK_GRAY		=	\\033[1;30m$/;"	m
DEPS	Makefile	/^DEPS			=$(SOURCES:.c=.d)$/;"	m
DEPS	libft/Makefile	/^DEPS			= $(SOURCES:.c=.d)$/;"	m
DEPS_BONUS	Makefile	/^DEPS_BONUS			=$(SOURCES_BONUS:.c=.d)$/;"	m
DFLAGS	libft/Makefile	/^DFLAGS			= -MMD -MP -g$/;"	m
END	mlx/Makefile	/^END=$'\\x1b[0m$/;"	m
ERR_DATA_FILTER	.mlx/mlx_png.c	35;"	d	file:
ERR_DATA_FILTER	mlx/mlx_png.c	35;"	d	file:
ERR_DATA_MISMATCH	.mlx/mlx_png.c	34;"	d	file:
ERR_DATA_MISMATCH	mlx/mlx_png.c	34;"	d	file:
ERR_MAGIC_SIZE	.mlx/mlx_png.c	24;"	d	file:
ERR_MAGIC_SIZE	mlx/mlx_png.c	24;"	d	file:
ERR_MAGIC_WRONG	.mlx/mlx_png.c	25;"	d	file:
ERR_MAGIC_WRONG	mlx/mlx_png.c	25;"	d	file:
ERR_MALLOC	mlx/mlx_png.c	36;"	d	file:
ERR_STRUCT_CRC	.mlx/mlx_png.c	29;"	d	file:
ERR_STRUCT_CRC	mlx/mlx_png.c	29;"	d	file:
ERR_STRUCT_DAT	.mlx/mlx_png.c	31;"	d	file:
ERR_STRUCT_DAT	mlx/mlx_png.c	31;"	d	file:
ERR_STRUCT_END	.mlx/mlx_png.c	28;"	d	file:
ERR_STRUCT_END	mlx/mlx_png.c	28;"	d	file:
ERR_STRUCT_HDR	.mlx/mlx_png.c	27;"	d	file:
ERR_STRUCT_HDR	mlx/mlx_png.c	27;"	d	file:
ERR_STRUCT_INCIMPL	.mlx/mlx_png.c	30;"	d	file:
ERR_STRUCT_INCIMPL	mlx/mlx_png.c	30;"	d	file:
ERR_STRUCT_INCOMPLETE	.mlx/mlx_png.c	26;"	d	file:
ERR_STRUCT_INCOMPLETE	mlx/mlx_png.c	26;"	d	file:
ERR_STRUCT_MISSCHK	.mlx/mlx_png.c	32;"	d	file:
ERR_STRUCT_MISSCHK	mlx/mlx_png.c	32;"	d	file:
ERR_ZLIB	.mlx/mlx_png.c	33;"	d	file:
ERR_ZLIB	mlx/mlx_png.c	33;"	d	file:
F	04012023.vim	/^nnoremap <buffer> <silent> F :call nerdtree#ui_glue#invokeKeyMap("F")$/;"	m
FONT_HEIGHT	.mlx/mlx_int.h	15;"	d
FONT_WIDTH	.mlx/mlx_int.h	14;"	d
FONT_WIDTH	mlx/mlx_string_put.c	8;"	d	file:
GET_NEXT_LINE_BONUS_H	libft/includes/get_next_line_bonus.h	13;"	d
GREEN	Makefile	/^GREEN		=	\\033[0;32m$/;"	m
GREEN	libft/Makefile	/^GREEN			=	\\033[0;32m$/;"	m
GREEN	mlx/Makefile	/^GREEN=$'\\x1b[32m$/;"	m
GREY	mlx/Makefile	/^GREY=$'\\x1b[30m$/;"	m
H	04012023.vim	/^nnoremap H <Home>$/;"	m
I	04012023.vim	/^nnoremap <buffer> <silent> I :call nerdtree#ui_glue#invokeKeyMap("I")$/;"	m
INC	mlx/Makefile	/^INC=-I.$/;"	m
INCLUDE_PATH	Makefile	/^INCLUDE_PATH	=.\/includes$/;"	m
INCLUDE_PATH	libft/Makefile	/^INCLUDE_PATH	= .\/includes$/;"	m
INCLUDE_PATH_BONUS	Makefile	/^INCLUDE_PATH_BONUS	=.\/includes_bonus$/;"	m
J	04012023.vim	/^nnoremap <buffer> <silent> J :call nerdtree#ui_glue#invokeKeyMap("J")$/;"	m
J	04012023.vim	/^vnoremap J :m '>+1$/;"	m
K	04012023.vim	/^nnoremap <buffer> <silent> K :call nerdtree#ui_glue#invokeKeyMap("K")$/;"	m
K	04012023.vim	/^vnoremap K :m '<-2$/;"	m
L	04012023.vim	/^nnoremap L <End>$/;"	m
LIBFTPRINTF_H	libft/includes/libftprintf.h	13;"	d
LIBFT_CHECKS_H	libft/includes/libft_checks.h	13;"	d
LIBFT_CONVERSE_H	libft/includes/libft_converse.h	13;"	d
LIBFT_H	libft/includes/libft.h	14;"	d
LIBFT_LIST_H	libft/includes/libft_list.h	13;"	d
LIBFT_MEMORY_H	libft/includes/libft_memory.h	13;"	d
LIBFT_PUTS_H	libft/includes/libft_puts.h	13;"	d
LIBFT_STRINGS_H	libft/includes/libft_strings.h	13;"	d
LIB_DIR	Makefile	/^LIB_DIR			= .\/libft\/includes\/$/;"	m
LIGHT_BLUE	Makefile	/^LIGHT_BLUE	=	\\033[1;34m$/;"	m
LIGHT_BLUE	libft/Makefile	/^LIGHT_BLUE		=	\\033[1;34m$/;"	m
LIGHT_CYAN	Makefile	/^LIGHT_CYAN	=	\\033[1;36m$/;"	m
LIGHT_CYAN	libft/Makefile	/^LIGHT_CYAN		=	\\033[1;36m$/;"	m
LIGHT_GRAY	Makefile	/^LIGHT_GRAY	=	\\033[0;37m$/;"	m
LIGHT_GRAY	libft/Makefile	/^LIGHT_GRAY		=	\\033[0;37m$/;"	m
LIGHT_GREEN	Makefile	/^LIGHT_GREEN	=	\\033[1;32m$/;"	m
LIGHT_GREEN	libft/Makefile	/^LIGHT_GREEN		=	\\033[1;32m$/;"	m
LIGHT_PURPLE	Makefile	/^LIGHT_PURPLE=	\\033[1;35m$/;"	m
LIGHT_PURPLE	libft/Makefile	/^LIGHT_PURPLE	=	\\033[1;35m$/;"	m
LIGHT_RED	Makefile	/^LIGHT_RED	=	\\033[1;31m$/;"	m
LIGHT_RED	libft/Makefile	/^LIGHT_RED		=	\\033[1;31m$/;"	m
MAKE_LIB	Makefile	/^MAKE_LIB		= libft\/libft.a$/;"	m
MAKE_MLX	Makefile	/^MAKE_MLX		= mlx\/libmlx.a$/;"	m
MAX_EVENT	.mlx/mlx_int.h	10;"	d
MAX_PIXEL_NB	.mlx/mlx_int.h	11;"	d
MD	Makefile	/^MD				= mkdir -p$/;"	m
MKFL	Makefile	/^MKFL			= Makefile$/;"	m
MKFL	libft/Makefile	/^MKFL			= Makefile$/;"	m
MLX_H	.mlx/mlx.h	47;"	d
MLX_H	mlx/mlx.h	40;"	d
MLX_SYNC_IMAGE_WRITABLE	mlx/mlx.h	144;"	d
MLX_SYNC_WIN_CMD_COMPLETED	mlx/mlx.h	146;"	d
MLX_SYNC_WIN_FLUSH_CMD	mlx/mlx.h	145;"	d
MODULE_OBJ	mlx/Makefile	/^MODULE_OBJ=$(MODULE_SRC:.swift=.swiftmodule)$/;"	m
MODULE_SRC	mlx/Makefile	/^MODULE_SRC= mlx_image.swift mlx_window.swift mlx_init.swift$/;"	m
NAME	Makefile	/^NAME			= so_long $/;"	m
NAME	libft/Makefile	/^NAME 			= libft.a$/;"	m
NAME	mlx/Makefile	/^NAME=libmlx.dylib$/;"	m
NAME_BONUS	Makefile	/^NAME_BONUS			= $/;"	m
NOM	.mlx/Makefile	/^NOM=libmlx.a$/;"	m
NO_COLOR	Makefile	/^NO_COLOR	=	\\033[0m$/;"	m
NO_COLOR	libft/Makefile	/^NO_COLOR		=	\\033[0m$/;"	m
O	04012023.vim	/^nnoremap <buffer> <silent> O :call nerdtree#ui_glue#invokeKeyMap("O")$/;"	m
OBJ	.mlx/Makefile	/^OBJ=$(OBJ1:.m=.o)$/;"	m
OBJ	mlx/Makefile	/^OBJ=$(SRC:.swift=.o)$/;"	m
OBJ1	.mlx/Makefile	/^OBJ1=$(SRC:.c=.o)$/;"	m
OBJS	Makefile	/^OBJS			=$(SOURCES:.c=.o)$/;"	m
OBJS	libft/Makefile	/^OBJS 			= $(SOURCES:.c=.o)$/;"	m
OBJS_BONUS	Makefile	/^OBJS_BONUS			=$(SOURCES_BONUS:.c=.o)$/;"	m
ORANGE	Makefile	/^ORANGE		=	\\033[0;33m$/;"	m
ORANGE	libft/Makefile	/^ORANGE			=	\\033[0;33m$/;"	m
P	04012023.vim	/^nnoremap <buffer> <silent> P :call nerdtree#ui_glue#invokeKeyMap("P")$/;"	m
PNG_HDR_SIZE	.mlx/mlx_png.c	20;"	d	file:
PNG_HDR_SIZE	mlx/mlx_png.c	20;"	d	file:
PNG_MAGIC_SIZE	.mlx/mlx_png.c	18;"	d	file:
PNG_MAGIC_SIZE	mlx/mlx_png.c	18;"	d	file:
PURPLE	Makefile	/^PURPLE		=	\\033[0;35m$/;"	m
PURPLE	libft/Makefile	/^PURPLE			=	\\033[0;35m$/;"	m
PURPLE	mlx/Makefile	/^PURPLE=$'\\x1b[35m$/;"	m
PXS	includes/so_long.h	26;"	d
R	04012023.vim	/^nnoremap <buffer> <silent> R :call nerdtree#ui_glue#invokeKeyMap("R")$/;"	m
RED	Makefile	/^RED	 		=	\\033[0;31m$/;"	m
RED	libft/Makefile	/^RED				=	\\033[0;31m$/;"	m
RED	mlx/Makefile	/^RED=$'\\x1b[31m$/;"	m
RETURN	.mlx/mlx_xpm.c	30;"	d	file:
RETURN	mlx/mlx_xpm.c	30;"	d	file:
REV	mlx/Makefile	/^REV=$'\\x1b[7m$/;"	m
RM	Makefile	/^RM				= rm -rf$/;"	m
RM	libft/Makefile	/^RM	 			= rm -f$/;"	m
SO_LONG_H	includes/so_long.h	14;"	d
SRC	.mlx/Makefile	/^SRC= mlx_shaders.c mlx_new_window.m mlx_init_loop.m mlx_new_image.m mlx_xpm.c mlx_int_str_to_wordtab.c$/;"	m
SRC	mlx/Makefile	/^SRC= interface.swift $(MODULE_SRC)$/;"	m
SessionLoad	04012023.vim	/^let SessionLoad = 1$/;"	v
T	04012023.vim	/^nnoremap <buffer> <silent> T :call nerdtree#ui_glue#invokeKeyMap("T")$/;"	m
U	04012023.vim	/^nnoremap <buffer> <silent> U :call nerdtree#ui_glue#invokeKeyMap("U")$/;"	m
UNDER	mlx/Makefile	/^UNDER=$'\\x1b[4m$/;"	m
UNIQ_BPP	.mlx/mlx_int.h	12;"	d
UNIQ_BPP	mlx/mlx_png.c	16;"	d	file:
WHITE	Makefile	/^WHITE		=	\\033[1;37m$/;"	m
WHITE	libft/Makefile	/^WHITE			=	\\033[1;37m$/;"	m
WHITE	mlx/Makefile	/^WHITE=$'\\x1b[37m$/;"	m
X	04012023.vim	/^nnoremap <buffer> <silent> X :call nerdtree#ui_glue#invokeKeyMap("X")$/;"	m
X_FLAGS	Makefile	/^X_FLAGS			= -Lmlx -lmlx -framework OpenGL -framework AppKit$/;"	m
YELLOW	Makefile	/^YELLOW		=	\\033[1;33m$/;"	m
YELLOW	libft/Makefile	/^YELLOW			=	\\033[1;33m$/;"	m
YELLOW	mlx/Makefile	/^YELLOW=$'\\x1b[33m$/;"	m
Z_CHUNK	.mlx/mlx_png.c	22;"	d	file:
Z_CHUNK	mlx/mlx_png.c	22;"	d	file:
[	04012023.vim	/^nnoremap [ :call ThePrev()$/;"	m
\1	04012023.vim	/^nnoremap \\1 1gt$/;"	m
\2	04012023.vim	/^nnoremap \\2 2gt$/;"	m
\3	04012023.vim	/^nnoremap \\3 3gt$/;"	m
\4	04012023.vim	/^nnoremap \\4 4gt$/;"	m
\5	04012023.vim	/^nnoremap \\5 5gt$/;"	m
\6	04012023.vim	/^nnoremap \\6 6gt$/;"	m
\7	04012023.vim	/^nnoremap \\7 7gt$/;"	m
\8	04012023.vim	/^nnoremap \\8 8gt$/;"	m
\9	04012023.vim	/^nnoremap \\9 9gt$/;"	m
\]	04012023.vim	/^nnoremap \\] T$/;"	m
\dg	04012023.vim	/^nmap \\dg <Plug>(denops-grep)$/;"	m
\e	04012023.vim	/^nnoremap \\e :source $MYVIMRC$/;"	m
\ev	04012023.vim	/^nnoremap \\ev :vsplit $MYVIMRC$/;"	m
\p]	04012023.vim	/^nnoremap \\p] }$/;"	m
\t	04012023.vim	/^nnoremap \\t :FloatermToggle$/;"	m
]	04012023.vim	/^nnoremap ] :call TheNext()$/;"	m
a	includes/so_long.h	/^	int		a;$/;"	m	struct:s_data
addr	includes/so_long.h	/^	char	*addr;$/;"	m	struct:s_data
addr	includes/so_long.h	/^	char	*addr;$/;"	m	struct:s_img
appid	.mlx/mlx_int.h	/^  void			*appid;$/;"	m	struct:mlx_ptr_s
b	includes/so_long.h	/^	int		b;$/;"	m	struct:s_data
bits_per_pixel	includes/so_long.h	/^	int		bits_per_pixel;$/;"	m	struct:s_data
bpp	.mlx/mlx_png.c	/^  int		bpp;$/;"	m	struct:png_info_s	file:
bpp	includes/so_long.h	/^	int		bpp;$/;"	m	struct:s_img
bpp	mlx/mlx_png.c	/^  int		bpp;$/;"	m	struct:png_info_s	file:
buffer	.mlx/mlx_int.h	/^  char			*buffer;$/;"	m	struct:mlx_img_list_s
bytes_per_pixel	.mlx/font.c	/^  unsigned int 	 bytes_per_pixel; \/* 2:RGB16, 3:RGB, 4:RGBA *\/ $/;"	m	struct:__anon1	file:
bytes_per_pixel	mlx/font.c	/^  unsigned int 	 bytes_per_pixel; \/* 2:RGB16, 3:RGB, 4:RGBA *\/ $/;"	m	struct:__anon2	file:
cc	04012023.vim	/^nnoremap cc :normal Hi\/\/jkj$/;"	m
cd	04012023.vim	/^nnoremap <buffer> <silent> cd :call nerdtree#ui_glue#invokeKeyMap("cd")$/;"	m
cll_img	includes/so_long.h	/^	void	*cll_img[6];$/;"	m	struct:s_data
col	.mlx/mlx_xpm.c	/^  int           col;$/;"	m	struct:s_xpm_col	file:
col	mlx/mlx_xpm.c	/^  int           col;$/;"	m	struct:s_xpm_col	file:
color	.mlx/mlx_png.c	/^  int		color;$/;"	m	struct:png_info_s	file:
color	.mlx/mlx_xpm.c	/^  int   color;$/;"	m	struct:s_col_name	file:
color	mlx/mlx_png.c	/^  int		color;$/;"	m	struct:png_info_s	file:
color	mlx/mlx_xpm.c	/^  int   color;$/;"	m	struct:s_col_name	file:
content	libft/includes/libft_list.h	/^	void			*content;$/;"	m	struct:s_list
counter_words	libft/sources/strings/ft_split.c	/^static	size_t	counter_words(const char *str, char c)$/;"	f	file:
crc_table	.mlx/mlx_png.c	/^unsigned long crc_table[256] = { 0, 0x77073096, 0xee0e612c, 0x990951ba, 0x76dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0xedb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x9b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x1db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x6b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0xf00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x86d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x3b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x4db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0xd6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0xa00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x26d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x5005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0xcb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0xbdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d };$/;"	v
crc_table	mlx/mlx_png.c	/^unsigned long crc_table[256] = { 0, 0x77073096, 0xee0e612c, 0x990951ba, 0x76dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0xedb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x9b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x1db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x6b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0xf00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x86d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x3b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x4db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0xd6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0xa00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x26d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x5005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0xcb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0xbdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d };$/;"	v
depth	.mlx/mlx_png.c	/^  int		depth;$/;"	m	struct:png_info_s	file:
depth	mlx/mlx_png.c	/^  int		depth;$/;"	m	struct:png_info_s	file:
display_log	.mlx/mlx_shaders.c	/^void display_log(GLuint object, void (*param_func)(), void (*getlog_func)())$/;"	f
e	04012023.vim	/^nnoremap <buffer> <silent> e :call nerdtree#ui_glue#invokeKeyMap("e")$/;"	m
endian	includes/so_long.h	/^	int		endian;$/;"	m	struct:s_data
endian	includes/so_long.h	/^	int		endian;$/;"	m	struct:s_img
ext_img	includes/so_long.h	/^	void	*ext_img[3];$/;"	m	struct:s_data
f	04012023.vim	/^nnoremap <buffer> <silent> f :call nerdtree#ui_glue#invokeKeyMap("f")$/;"	m
font	.mlx/mlx_int.h	/^  mlx_img_list_t	*font;$/;"	m	struct:mlx_ptr_s
font_atlas	.mlx/font.c	/^} font_atlas = {$/;"	v	typeref:struct:__anon1	file:
font_atlas	mlx/font.c	/^} font_atlas = {$/;"	v	typeref:struct:__anon2	file:
font_fshader	.mlx/mlx_int.h	/^  GLuint	font_fshader;$/;"	m	struct:glsl_info_s
font_program	.mlx/mlx_int.h	/^  GLuint	font_program;$/;"	m	struct:glsl_info_s
font_vshader	.mlx/mlx_int.h	/^  GLuint	font_vshader;$/;"	m	struct:glsl_info_s
ft2_strlen	libft/sources/lines/get_next_line_utils_bonus.c	/^size_t	ft2_strlen(char *str)$/;"	f
ft_after_loading	sources/ft_central_game.c	/^void	ft_after_loading(t_data *data)$/;"	f
ft_atoi	libft/sources/converts/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_atoi_plus	libft/sources/converts/ft_atoi_plus.c	/^long	ft_atoi_plus(const char *str)$/;"	f
ft_bzero	libft/sources/mem_edit/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/sources/mem_edit/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_check_arg_atoi	libft/sources/converts/ft_atoi_plus.c	/^void	ft_check_arg_atoi(const char *str, int i)$/;"	f
ft_check_errors	sources/ft_check_errors.c	/^void	ft_check_errors(t_data *data)$/;"	f
ft_check_size_map	sources/ft_check_errors.c	/^void	ft_check_size_map(t_data *data)$/;"	f
ft_convertx	libft/sources/converts/ft_convertx.c	/^int	ft_convertx(unsigned int num, int base, int mode)$/;"	f
ft_countnbr	libft/sources/converts/ft_itoa.c	/^static	int	ft_countnbr(int n)$/;"	f	file:
ft_doitoa	libft/sources/converts/ft_itoa.c	/^static	char	*ft_doitoa(int n, char *dest, int counter)$/;"	f	file:
ft_domall	libft/sources/strings/ft_split.c	/^static char	**ft_domall(char *s, char c, char **dest)$/;"	f	file:
ft_exit_game	sources/ft_central_game.c	/^int	ft_exit_game(int keycode, t_data *data)$/;"	f
ft_final_sprite_loading	sources/ft_upload_images.c	/^void	ft_final_sprite_loading(int a, char *path, int ty_sprite, \\$/;"	f
ft_first_printmap	sources/ft_print_map.c	/^int	ft_first_printmap(t_data *data)$/;"	f
ft_fitoar	sources/ft_fitoar.c	/^void	ft_fitoar(t_data *data, int fd)$/;"	f
ft_free	libft/sources/strings/ft_split.c	/^static char	*ft_free(char *dest, char **supdest, int g)$/;"	f	file:
ft_free_stacks_t	sources/ft_free_memory.c	/^void	ft_free_stacks_t(t_data *t)$/;"	f
ft_get_player_position	sources/map.c	/^int	ft_get_player_position(t_data *data)$/;"	f
ft_get_size_map	sources/ft_map_handler.c	/^void	ft_get_size_map(t_data *data, int fd, char **argv)$/;"	f
ft_getlines	libft/sources/lines/get_next_line_bonus.c	/^char	*ft_getlines(char *ptr)$/;"	f
ft_isalnum	libft/sources/checks/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/sources/checks/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/sources/checks/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/sources/checks/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/sources/checks/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	libft/sources/converts/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_load_images	sources/ft_upload_images.c	/^void	ft_load_images(t_data *data)$/;"	f
ft_load_sprites	sources/ft_upload_images.c	/^void	ft_load_sprites(char *img_name, int mem_sprite, int ty_sprite, \\$/;"	f
ft_lstadd_back	libft/sources/list/ft_lstadd_back_bonus.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/sources/list/ft_lstadd_front_bonus.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/sources/list/ft_lstclear_bonus.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	libft/sources/list/ft_lstdelone_bonus.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstiter	libft/sources/list/ft_lstiter_bonus.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/sources/list/ft_lstlast_bonus.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/sources/list/ft_lstmap_bonus.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/sources/list/ft_lstnew_bonus.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/sources/list/ft_lstsize_bonus.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	libft/sources/mem_edit/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/sources/mem_edit/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/sources/mem_edit/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	libft/sources/mem_edit/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/sources/mem_edit/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_move_right	sources/ft_movements_player.c	/^void	ft_move_right(t_data *data)$/;"	f
ft_newptr	libft/sources/lines/get_next_line_bonus.c	/^char	*ft_newptr(char *ptr)$/;"	f
ft_next_game	sources/map.c	/^int	ft_next_game(int keycode, t_data *data)$/;"	f
ft_path_to_sprite	sources/ft_upload_images.c	/^char	*ft_path_to_sprite(char *img_name, int n)$/;"	f
ft_pixel_push	sources/ft_pixel_push.c	/^void	ft_pixel_push(t_data *data, int x, int y, int color)$/;"	f
ft_player_move_left	sources/ft_player_movements.c	/^int	ft_player_move_left(t_data *data)$/;"	f
ft_player_move_right	sources/ft_player_movements.c	/^int	ft_player_move_right(t_data *data)$/;"	f
ft_player_stop	sources/ft_animation_player_still.c	/^void	ft_player_stop(t_data *data)$/;"	f
ft_player_stop_back	sources/ft_animation_player_still.c	/^void	ft_player_stop_back(t_data *data)$/;"	f
ft_player_stop_back_second	sources/ft_animation_player_still.c	/^void	ft_player_stop_back_second(t_data *data)$/;"	f
ft_player_stop_second	sources/ft_animation_player_still.c	/^void	ft_player_stop_second(t_data *data)$/;"	f
ft_print_env	sources/ft_print_player.c	/^int	ft_print_env(t_data *data)$/;"	f
ft_print_player	sources/ft_print_player.c	/^void	ft_print_player(t_data *data)$/;"	f
ft_print_player2	sources/ft_print_player.c	/^void	ft_print_player2(t_data *data)$/;"	f
ft_print_stack	sources/ft_print_stack.c	/^void	ft_print_stack(t_data *t)$/;"	f
ft_printf	libft/sources/printf/ft_printf.c	/^int	ft_printf(char const *src, ...)$/;"	f
ft_ptr	libft/sources/converts/ft_ptr.c	/^int	ft_ptr(unsigned long long strike, int nextbase)$/;"	f
ft_putchar	libft/sources/puts/ft_putchar.c	/^int	ft_putchar(const char c)$/;"	f
ft_putchar2	libft/sources/puts/ft_putnbr_fd.c	/^static	void	ft_putchar2(char c, int fd)$/;"	f	file:
ft_putchar_fd	libft/sources/puts/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/sources/puts/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr	libft/sources/puts/ft_putnbr.c	/^int	ft_putnbr(int n, int counter)$/;"	f
ft_putnbr_fd	libft/sources/puts/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putnbr_u	libft/sources/puts/ft_putnbr_u.c	/^int	ft_putnbr_u(unsigned int n, int counter)$/;"	f
ft_putstr	libft/sources/puts/ft_putstr.c	/^int	ft_putstr(const char *s)$/;"	f
ft_putstr_error	libft/sources/puts/ft_putstr_error.c	/^int	ft_putstr_error(const char *s)$/;"	f
ft_putstr_fd	libft/sources/puts/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_read_line	libft/sources/lines/get_next_line_bonus.c	/^char	*ft_read_line(char *ptr, int fd)$/;"	f
ft_realconvert	libft/sources/converts/ft_convertx.c	/^static int	ft_realconvert(char *buffer, int i)$/;"	f	file:
ft_realptr	libft/sources/converts/ft_ptr.c	/^static int	ft_realptr(char *newbuff, int i)$/;"	f	file:
ft_second_printmap	sources/ft_print_map.c	/^void 	ft_second_printmap(t_data *data)$/;"	f
ft_split	libft/sources/strings/ft_split.c	/^char	**ft_split(char *s, char c)$/;"	f
ft_splitter	libft/sources/printf/ft_printf.c	/^static	int	ft_splitter(char const *src, va_list ptr)$/;"	f	file:
ft_start_game	sources/map.c	/^void	ft_start_game(t_data *data)$/;"	f
ft_strchr	libft/sources/strings/ft_strchr.c	/^char	*ft_strchr(char *ptr, int n)$/;"	f
ft_strdup	libft/sources/strings/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_striteri	libft/sources/strings/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	libft/sources/strings/ft_strjoin.c	/^char	*ft_strjoin(char *ptr, char *buffer)$/;"	f
ft_strlcat	libft/sources/strings/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcpy	libft/sources/strings/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlen	libft/sources/checks/ft_strlen.c	/^int	ft_strlen(const char *s)$/;"	f
ft_strmapi	libft/sources/strings/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/sources/strings/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	libft/sources/strings/ft_strnstr.c	/^char	*ft_strnstr(const char *dst, const char *src, size_t len)$/;"	f
ft_strrchr	libft/sources/strings/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/sources/strings/ft_strtrim.c	/^char	*ft_strtrim(char *s1, char *set)$/;"	f
ft_substr	libft/sources/strings/ft_substr.c	/^char	*ft_substr(char *s, unsigned int start, unsigned int len)$/;"	f
ft_tolower	libft/sources/converts/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/sources/converts/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_wait_time	sources/map.c	/^int	ft_wait_time(t_data *data)$/;"	f
func_t	.mlx/mlx_int.h	/^typedef int (*func_t)();$/;"	t
gd	04012023.vim	/^nnoremap gd :EasyCompleteGotoDefinition$/;"	m
get_next_line	libft/sources/lines/get_next_line_bonus.c	/^char	*get_next_line(int fd)$/;"	f
gi	04012023.vim	/^nnoremap <buffer> <silent> gi :call nerdtree#ui_glue#invokeKeyMap("gi")$/;"	m
glsl_info_s	.mlx/mlx_int.h	/^typedef struct	glsl_info_s$/;"	s
glsl_info_t	.mlx/mlx_int.h	/^} glsl_info_t;$/;"	t	typeref:struct:glsl_info_s
go	04012023.vim	/^nnoremap <buffer> <silent> go :call nerdtree#ui_glue#invokeKeyMap("go")$/;"	m
gr	04012023.vim	/^nnoremap gr :EasyCompleteReference$/;"	m
gr_img	includes/so_long.h	/^	void	*gr_img[2];$/;"	m	struct:s_data
gs	04012023.vim	/^nnoremap <buffer> <silent> gs :call nerdtree#ui_glue#invokeKeyMap("gs")$/;"	m
gx	04012023.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
height	.mlx/font.c	/^  unsigned int 	 height;$/;"	m	struct:__anon1	file:
height	.mlx/mlx_int.h	/^  int			height;$/;"	m	struct:mlx_img_list_s
height	.mlx/mlx_png.c	/^  unsigned int	height;$/;"	m	struct:png_info_s	file:
height	mlx/font.c	/^  unsigned int 	 height;$/;"	m	struct:__anon2	file:
height	mlx/mlx_png.c	/^  unsigned int	height;$/;"	m	struct:png_info_s	file:
i	04012023.vim	/^nnoremap <buffer> <silent> i :call nerdtree#ui_glue#invokeKeyMap("i")$/;"	m
image_fshader	.mlx/mlx_int.h	/^  GLuint	image_fshader;$/;"	m	struct:glsl_info_s
image_program	.mlx/mlx_int.h	/^  GLuint	image_program;$/;"	m	struct:glsl_info_s
image_vshader	.mlx/mlx_int.h	/^  GLuint	image_vshader;$/;"	m	struct:glsl_info_s
img	.mlx/mlx_int.h	/^  mlx_img_list_t	*img;$/;"	m	struct:mlx_img_ctx_s
img	includes/so_long.h	/^	void	*img;$/;"	m	struct:s_data
img	includes/so_long.h	/^	void	*img;$/;"	m	struct:s_img
img_height	includes/so_long.h	/^	int		img_height;$/;"	m	struct:s_data
img_list	.mlx/mlx_int.h	/^  mlx_img_ctx_t		*img_list;$/;"	m	struct:mlx_win_list_s
img_list	.mlx/mlx_int.h	/^  mlx_img_list_t	*img_list;$/;"	m	struct:mlx_ptr_s
img_width	includes/so_long.h	/^	int		img_width;$/;"	m	struct:s_data
imgs	includes/so_long.h	/^	t_img	*imgs;$/;"	m	struct:s_data
interlace	.mlx/mlx_png.c	/^  int		interlace;$/;"	m	struct:png_info_s	file:
interlace	mlx/mlx_png.c	/^  int		interlace;$/;"	m	struct:png_info_s	file:
jk	04012023.vim	/^inoremap jk $/;"	m
length	includes/so_long.h	/^	int		length;$/;"	m	struct:s_img
line_length	includes/so_long.h	/^	int		line_length;$/;"	m	struct:s_data
loc_font_atlassize	.mlx/mlx_int.h	/^  GLint		loc_font_atlassize;$/;"	m	struct:glsl_info_s
loc_font_color	.mlx/mlx_int.h	/^  GLint		loc_font_color;$/;"	m	struct:glsl_info_s
loc_font_posinatlas	.mlx/mlx_int.h	/^  GLint		loc_font_posinatlas;$/;"	m	struct:glsl_info_s
loc_font_posinwin	.mlx/mlx_int.h	/^  GLint		loc_font_posinwin;$/;"	m	struct:glsl_info_s
loc_font_position	.mlx/mlx_int.h	/^  GLint		loc_font_position;$/;"	m	struct:glsl_info_s
loc_font_texture	.mlx/mlx_int.h	/^  GLint		loc_font_texture;$/;"	m	struct:glsl_info_s
loc_font_winhalfsize	.mlx/mlx_int.h	/^  GLint		loc_font_winhalfsize;$/;"	m	struct:glsl_info_s
loc_image_pos	.mlx/mlx_int.h	/^  GLint		loc_image_pos;$/;"	m	struct:glsl_info_s
loc_image_position	.mlx/mlx_int.h	/^  GLint		loc_image_position;$/;"	m	struct:glsl_info_s
loc_image_size	.mlx/mlx_int.h	/^  GLint		loc_image_size;$/;"	m	struct:glsl_info_s
loc_image_texture	.mlx/mlx_int.h	/^  GLint		loc_image_texture;$/;"	m	struct:glsl_info_s
loc_image_winhalfsize	.mlx/mlx_int.h	/^  GLint		loc_image_winhalfsize;$/;"	m	struct:glsl_info_s
loc_pixel_position	.mlx/mlx_int.h	/^  GLint		loc_pixel_position;$/;"	m	struct:glsl_info_s
loc_pixel_texture	.mlx/mlx_int.h	/^  GLint		loc_pixel_texture;$/;"	m	struct:glsl_info_s
loc_pixel_winhalfsize	.mlx/mlx_int.h	/^  GLint		loc_pixel_winhalfsize;$/;"	m	struct:glsl_info_s
loop_hook	.mlx/mlx_int.h	/^  void			(*loop_hook)(void *);$/;"	m	struct:mlx_ptr_s
loop_hook_data	.mlx/mlx_int.h	/^  void			*loop_hook_data;$/;"	m	struct:mlx_ptr_s
loop_timer	.mlx/mlx_int.h	/^  void			*loop_timer;$/;"	m	struct:mlx_ptr_s
m	04012023.vim	/^nnoremap <buffer> <silent> m :call nerdtree#ui_glue#invokeKeyMap("m")$/;"	m
magic	.mlx/mlx_png.c	/^unsigned char magic[PNG_MAGIC_SIZE] = {137, 80, 78, 71, 13, 10, 26, 10};$/;"	v
magic	mlx/mlx_png.c	/^unsigned char magic[PNG_MAGIC_SIZE] = {137, 80, 78, 71, 13, 10, 26, 10};$/;"	v
main	sources/so_long.c	/^int	main(int argc, char **argv)$/;"	f
main_loop_active	.mlx/mlx_int.h	/^  int			main_loop_active;$/;"	m	struct:mlx_ptr_s
map	includes/so_long.h	/^	char	*map;$/;"	m	struct:s_data
map_height	includes/so_long.h	/^	int		map_height;\/\/ altura of the map \/\/$/;"	m	struct:s_data
map_width	includes/so_long.h	/^	int		map_width;\/\/ anchura del mapa \/\/$/;"	m	struct:s_data
matrix	includes/so_long.h	/^	char	**matrix;$/;"	m	struct:s_data
mipng_crc	.mlx/mlx_png.c	/^int	mipng_crc(unsigned char *ptr, int len)$/;"	f
mipng_crc	mlx/mlx_png.c	/^int	mipng_crc(unsigned char *ptr, int len)$/;"	f
mipng_data	.mlx/mlx_png.c	/^int	mipng_data(mlx_img_list_t *img, unsigned char *dat, png_info_t *pi)$/;"	f
mipng_data	mlx/mlx_png.c	/^int	mipng_data(void *img, unsigned char *dat, png_info_t *pi)$/;"	f
mipng_defilter	.mlx/mlx_png.c	/^unsigned char (*(mipng_defilter[]))(unsigned char *buff, int pos, int a, int b, int c) =$/;"	v
mipng_defilter	mlx/mlx_png.c	/^unsigned char (*(mipng_defilter[]))(unsigned char *buff, int pos, int a, int b, int c) =$/;"	v
mipng_defilter_average	.mlx/mlx_png.c	/^unsigned char mipng_defilter_average(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_average	mlx/mlx_png.c	/^unsigned char mipng_defilter_average(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_none	.mlx/mlx_png.c	/^unsigned char mipng_defilter_none(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_none	mlx/mlx_png.c	/^unsigned char mipng_defilter_none(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_paeth	.mlx/mlx_png.c	/^unsigned char mipng_defilter_paeth(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_paeth	mlx/mlx_png.c	/^unsigned char mipng_defilter_paeth(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_sub	.mlx/mlx_png.c	/^unsigned char mipng_defilter_sub(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_sub	mlx/mlx_png.c	/^unsigned char mipng_defilter_sub(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_up	.mlx/mlx_png.c	/^unsigned char mipng_defilter_up(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_up	mlx/mlx_png.c	/^unsigned char mipng_defilter_up(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_err	.mlx/mlx_png.c	/^char *(mipng_err[]) =$/;"	v
mipng_err	mlx/mlx_png.c	/^char *(mipng_err[]) =$/;"	v
mipng_fill_img	.mlx/mlx_png.c	/^int	mipng_fill_img(mlx_img_list_t *img, unsigned char *buf, png_info_t *pi)$/;"	f
mipng_fill_img	mlx/mlx_png.c	/^int	mipng_fill_img(void *img, unsigned char *buf, png_info_t *pi)$/;"	f
mipng_is_type	.mlx/mlx_png.c	/^int	mipng_is_type(unsigned char *ptr, char *type)$/;"	f
mipng_is_type	mlx/mlx_png.c	/^int	mipng_is_type(unsigned char *ptr, char *type)$/;"	f
mipng_magic	.mlx/mlx_png.c	/^int	mipng_magic(unsigned char *ptr, int size)$/;"	f
mipng_magic	mlx/mlx_png.c	/^int	mipng_magic(unsigned char *ptr, int size)$/;"	f
mipng_structure	.mlx/mlx_png.c	/^int	mipng_structure(unsigned char *ptr, int size, unsigned char **hdr, unsigned char **dat)$/;"	f
mipng_structure	mlx/mlx_png.c	/^int	mipng_structure(unsigned char *ptr, int size, unsigned char **hdr, unsigned char **dat)$/;"	f
mipng_verif_hdr	.mlx/mlx_png.c	/^int	mipng_verif_hdr(unsigned char *hdr, png_info_t *pi)$/;"	f
mipng_verif_hdr	mlx/mlx_png.c	/^int	mipng_verif_hdr(unsigned char *hdr, png_info_t *pi)$/;"	f
mlx	includes/so_long.h	/^	void	*mlx;$/;"	m	struct:s_data
mlx_col_name	.mlx/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name
mlx_col_name	mlx/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name
mlx_img_ctx_s	.mlx/mlx_int.h	/^typedef struct	mlx_img_ctx_s$/;"	s
mlx_img_ctx_t	.mlx/mlx_int.h	/^} mlx_img_ctx_t;$/;"	t	typeref:struct:mlx_img_ctx_s
mlx_img_list_s	.mlx/mlx_int.h	/^typedef struct	mlx_img_list_s$/;"	s
mlx_img_list_t	.mlx/mlx_int.h	/^} mlx_img_list_t;$/;"	t	typeref:struct:mlx_img_list_s
mlx_int_file_get_rid_comment	.mlx/mlx_xpm.c	/^void	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f
mlx_int_file_get_rid_comment	mlx/mlx_xpm.c	/^void	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f
mlx_int_fill	mlx/mlx_string_put.c	/^void mlx_int_fill(unsigned char *data, int sl)$/;"	f
mlx_int_get_col_name	.mlx/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f
mlx_int_get_col_name	mlx/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f
mlx_int_get_line	.mlx/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f
mlx_int_get_line	mlx/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f
mlx_int_get_text_rgb	.mlx/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f
mlx_int_get_text_rgb	mlx/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f
mlx_int_parse_png	.mlx/mlx_png.c	/^mlx_img_list_t	*mlx_int_parse_png(mlx_ptr_t *xvar, unsigned char *fptr, int size)$/;"	f
mlx_int_parse_png	mlx/mlx_png.c	/^void	*mlx_int_parse_png(void *xvar, unsigned char *fptr, int size, int *width, int *height)$/;"	f
mlx_int_parse_xpm	.mlx/mlx_xpm.c	/^void	*mlx_int_parse_xpm(mlx_ptr_t *xvar,void *info,int info_size,char *(*f)())$/;"	f
mlx_int_parse_xpm	mlx/mlx_xpm.c	/^void	*mlx_int_parse_xpm(void *xvar,void *info,int info_size,char *(*f)(), int *width, int *height)$/;"	f
mlx_int_static_line	.mlx/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f
mlx_int_static_line	mlx/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f
mlx_int_str_str	.mlx/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f
mlx_int_str_str	mlx/mlx_xpm.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f
mlx_int_str_str_cote	.mlx/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f
mlx_int_str_str_cote	mlx/mlx_xpm.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f
mlx_int_str_to_wordtab	.mlx/mlx_int_str_to_wordtab.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f
mlx_int_str_to_wordtab	mlx/mlx_xpm.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f
mlx_int_xpm_set_pixel	.mlx/mlx_xpm.c	/^void	mlx_int_xpm_set_pixel(mlx_img_list_t *img, char *data, int opp, int col, int x)$/;"	f
mlx_int_xpm_set_pixel	mlx/mlx_xpm.c	/^void	mlx_int_xpm_set_pixel(char *data, int opp, int col, int x)$/;"	f
mlx_png_file_to_image	.mlx/mlx_png.c	/^void	*mlx_png_file_to_image(mlx_ptr_t *xvar, char *file, int *width, int *height)$/;"	f
mlx_png_file_to_image	mlx/mlx_png.c	/^void	*mlx_png_file_to_image(void *xvar, char *file, int *width, int *height)$/;"	f
mlx_ptr_s	.mlx/mlx_int.h	/^typedef struct		mlx_ptr_s$/;"	s
mlx_ptr_t	.mlx/mlx_int.h	/^} mlx_ptr_t;$/;"	t	typeref:struct:mlx_ptr_s
mlx_shaders	.mlx/mlx_shaders.c	/^int mlx_shaders(glsl_info_t *glsl)$/;"	f
mlx_shaders_font	.mlx/mlx_shaders.c	/^int mlx_shaders_font(glsl_info_t *glsl)$/;"	f
mlx_shaders_image	.mlx/mlx_shaders.c	/^int mlx_shaders_image(glsl_info_t *glsl)$/;"	f
mlx_shaders_pixel	.mlx/mlx_shaders.c	/^int mlx_shaders_pixel(glsl_info_t *glsl)$/;"	f
mlx_string_put	mlx/mlx_string_put.c	/^int mlx_string_put(void *mlx_ptr, void *win_ptr, int x, int y, int color, char *string)$/;"	f
mlx_win_list_s	.mlx/mlx_int.h	/^typedef struct	mlx_win_list_s$/;"	s
mlx_win_list_t	.mlx/mlx_int.h	/^} mlx_win_list_t;$/;"	t	typeref:struct:mlx_win_list_s
mlx_xpm_file_to_image	.mlx/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(mlx_ptr_t *xvar,char *file,int *width,int *height)$/;"	f
mlx_xpm_file_to_image	mlx/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(void *xvar,char *file,int *width,int *height)$/;"	f
mlx_xpm_to_image	.mlx/mlx_xpm.c	/^void	*mlx_xpm_to_image(mlx_ptr_t *xvar,char **xpm_data,int *width,int *height)$/;"	f
mlx_xpm_to_image	mlx/mlx_xpm.c	/^void	*mlx_xpm_to_image(void *xvar,char **xpm_data,int *width,int *height)$/;"	f
name	.mlx/mlx_xpm.c	/^  char  *name;$/;"	m	struct:s_col_name	file:
name	.mlx/mlx_xpm.c	/^  int           name;$/;"	m	struct:s_xpm_col	file:
name	mlx/mlx_xpm.c	/^  char  *name;$/;"	m	struct:s_col_name	file:
name	mlx/mlx_xpm.c	/^  int           name;$/;"	m	struct:s_xpm_col	file:
nb_flush	.mlx/mlx_int.h	/^  int			nb_flush;$/;"	m	struct:mlx_win_list_s
next	.mlx/mlx_int.h	/^  struct mlx_img_ctx_s	*next;$/;"	m	struct:mlx_img_ctx_s	typeref:struct:mlx_img_ctx_s::mlx_img_ctx_s
next	.mlx/mlx_int.h	/^  struct mlx_img_list_s	*next;$/;"	m	struct:mlx_img_list_s	typeref:struct:mlx_img_list_s::mlx_img_list_s
next	.mlx/mlx_int.h	/^  struct mlx_win_list_s	*next;$/;"	m	struct:mlx_win_list_s	typeref:struct:mlx_win_list_s::mlx_win_list_s
next	libft/includes/libft_list.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
o	04012023.vim	/^nnoremap <buffer> <silent> o :call nerdtree#ui_glue#invokeKeyMap("o")$/;"	m
p	04012023.vim	/^nnoremap <buffer> <silent> p :call nerdtree#ui_glue#invokeKeyMap("p")$/;"	m
pic	includes/so_long.h	/^	char	*pic;$/;"	m	struct:s_data
pixel_data	.mlx/font.c	/^  unsigned char	 pixel_data[1140 * 20 * 4 + 1];$/;"	m	struct:__anon1	file:
pixel_data	mlx/font.c	/^  unsigned char	 pixel_data[1140 * 20 * 4 + 1];$/;"	m	struct:__anon2	file:
pixel_fshader	.mlx/mlx_int.h	/^  GLuint	pixel_fshader;$/;"	m	struct:glsl_info_s
pixel_program	.mlx/mlx_int.h	/^  GLuint	pixel_program;$/;"	m	struct:glsl_info_s
pixel_vshader	.mlx/mlx_int.h	/^  GLuint	pixel_vshader;$/;"	m	struct:glsl_info_s
pixmgt	.mlx/mlx_int.h	/^  int			pixmgt;$/;"	m	struct:mlx_win_list_s
pl	includes/so_long.h	/^	int		pl[2];$/;"	m	struct:s_img
pl_img	includes/so_long.h	/^	void	*pl_img[17];$/;"	m	struct:s_data
png_info_s	.mlx/mlx_png.c	/^typedef struct png_info_s$/;"	s	file:
png_info_s	mlx/mlx_png.c	/^typedef struct png_info_s$/;"	s	file:
png_info_t	.mlx/mlx_png.c	/^} png_info_t;$/;"	t	typeref:struct:png_info_s	file:
png_info_t	mlx/mlx_png.c	/^} png_info_t;$/;"	t	typeref:struct:png_info_s	file:
q	04012023.vim	/^nnoremap <buffer> <silent> q :call nerdtree#ui_glue#invokeKeyMap("q")$/;"	m
r	04012023.vim	/^nnoremap <buffer> <silent> r :call nerdtree#ui_glue#invokeKeyMap("r")$/;"	m
s	04012023.vim	/^nnoremap <buffer> <silent> s :call nerdtree#ui_glue#invokeKeyMap("s")$/;"	m
s:cpo_save	04012023.vim	/^let s:cpo_save=&cpo$/;"	v
s:l	04012023.vim	/^let s:l = 1 - ((0 * winheight(0) + 40) \/ 80)$/;"	v
s:l	04012023.vim	/^let s:l = 23 - ((22 * winheight(0) + 40) \/ 80)$/;"	v
s:l	04012023.vim	/^let s:l = 27 - ((26 * winheight(0) + 40) \/ 80)$/;"	v
s:l	04012023.vim	/^let s:l = 49 - ((38 * winheight(0) + 40) \/ 80)$/;"	v
s:l	04012023.vim	/^let s:l = 60 - ((59 * winheight(0) + 40) \/ 80)$/;"	v
s:l	04012023.vim	/^let s:l = 64 - ((63 * winheight(0) + 40) \/ 80)$/;"	v
s:l	04012023.vim	/^let s:l = 75 - ((63 * winheight(0) + 40) \/ 80)$/;"	v
s:l	04012023.vim	/^let s:l = 88 - ((64 * winheight(0) + 40) \/ 80)$/;"	v
s:save_splitbelow	04012023.vim	/^let s:save_splitbelow = &splitbelow$/;"	v
s:save_splitright	04012023.vim	/^let s:save_splitright = &splitright$/;"	v
s:save_winminheight	04012023.vim	/^let s:save_winminheight = &winminheight$/;"	v
s:save_winminwidth	04012023.vim	/^let s:save_winminwidth = &winminwidth$/;"	v
s:so_save	04012023.vim	/^let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1$/;"	v
s:sx	04012023.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	04012023.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
s_col_name	.mlx/mlx_xpm.c	/^struct  s_col_name$/;"	s	file:
s_col_name	mlx/mlx_xpm.c	/^struct  s_col_name$/;"	s	file:
s_data	includes/so_long.h	/^typedef struct s_data {$/;"	s
s_img	includes/so_long.h	/^typedef struct	s_img {$/;"	s
s_list	libft/includes/libft_list.h	/^typedef struct s_list$/;"	s
s_xpm_col	.mlx/mlx_xpm.c	/^typedef struct  s_xpm_col$/;"	s	file:
s_xpm_col	mlx/mlx_xpm.c	/^typedef struct  s_xpm_col$/;"	s	file:
src_lenght	libft/sources/strings/ft_strlcpy.c	/^static size_t	src_lenght(const char *src)$/;"	f	file:
step	includes/so_long.h	/^	int		step;$/;"	m	struct:s_data
t	04012023.vim	/^nnoremap <buffer> <silent> t :call nerdtree#ui_glue#invokeKeyMap("t")$/;"	m
t_data	includes/so_long.h	/^}	t_data;$/;"	t	typeref:struct:s_data
t_img	includes/so_long.h	/^}	t_img;$/;"	t	typeref:struct:s_img
t_list	libft/includes/libft_list.h	/^}	t_list;$/;"	t	typeref:struct:s_list
t_xpm_col	.mlx/mlx_xpm.c	/^} t_xpm_col;$/;"	t	typeref:struct:s_xpm_col	file:
t_xpm_col	mlx/mlx_xpm.c	/^} t_xpm_col;$/;"	t	typeref:struct:s_xpm_col	file:
texture	.mlx/mlx_int.h	/^  GLuint		texture;$/;"	m	struct:mlx_img_ctx_s
time	includes/so_long.h	/^	int		time;$/;"	m	struct:s_data
u	04012023.vim	/^nnoremap <buffer> <silent> u :call nerdtree#ui_glue#invokeKeyMap("u")$/;"	m
vbuffer	.mlx/mlx_int.h	/^  GLuint		vbuffer;$/;"	m	struct:mlx_img_ctx_s
vertexes	.mlx/mlx_int.h	/^  GLfloat		vertexes[8];$/;"	m	struct:mlx_img_list_s
width	.mlx/font.c	/^  unsigned int 	 width;$/;"	m	struct:__anon1	file:
width	.mlx/mlx_int.h	/^  int			width;$/;"	m	struct:mlx_img_list_s
width	.mlx/mlx_png.c	/^  unsigned int	width;$/;"	m	struct:png_info_s	file:
width	mlx/font.c	/^  unsigned int 	 width;$/;"	m	struct:__anon2	file:
width	mlx/mlx_png.c	/^  unsigned int	width;$/;"	m	struct:png_info_s	file:
win	includes/so_long.h	/^	void	*win;$/;"	m	struct:s_data
win_list	.mlx/mlx_int.h	/^  mlx_win_list_t	*win_list;$/;"	m	struct:mlx_ptr_s
winid	.mlx/mlx_int.h	/^  void			*winid;$/;"	m	struct:mlx_win_list_s
wll_img	includes/so_long.h	/^	void	*wll_img[2];$/;"	m	struct:s_data
x	04012023.vim	/^nnoremap <buffer> <silent> x :call nerdtree#ui_glue#invokeKeyMap("x")$/;"	m
x	includes/so_long.h	/^	int		x;$/;"	m	struct:s_data
y	includes/so_long.h	/^	int		y;$/;"	m	struct:s_data
zt	04012023.vim	/^normal! zt$/;"	m
